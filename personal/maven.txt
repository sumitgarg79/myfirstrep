to use Maven variables inside your .properties files use resouces tag in pom.xml 
-------
mvn clean install is not same as mvn install ( clean is not called in this case)
clean is in clean lifecycle while install is in default lifecycle
------------------------------------

NOTE :- add  repository URL in settings.xml instead of pom.xml to download dependency
---------
As of Maven 3.x, repositories are searched in the order in which they are declared.
to download a specific file 
we can declare repositories either in pom.xml and and settings.xml also 

to download a specific dependency
mvn install:install-file -DgroupId=io.packagecloud  -DartifactId=client  -Dversion=3.0.0  -Dclassifier=sources         
                           
SNAPSHOT version dependencies look just like regular dependencies, except the version will have -SNAPSHOT appended to it.

<dependency>
  <groupId>io.packagecloud</groupId>
  <artifactId>client</artifactId>
  <version>3.0.0-SNAPSHOT</version>
</dependency>
The idea is that you can continuously push your latest changes to 3.0.0-SNAPSHOT and anyone depending on it will get the latest changes every time they build their project. Then, after a few iterations, and everyone is happy the latest state of 3.0.0-SNAPSHOT, it can be permanently released as 3.0.0

Maven central is defined in SUPER pom.xml ie we dont need to define it in our pom
<url>http://repo1.maven.org/maven2</url>                     
                           
download specific dependency 					   
mvn org.apache.maven.plugins:maven-dependency-plugin:2.1:get  -DrepoUrl=https://gitlab.com/api/v4/groups/5513871/-/packages/maven   -Dartifact=com.amazonaws:aws-java-sdk-s3:1.11.475
			
-----------------------------------
in case of error "Failure to find org.jfrog.maven.annomojo:maven-plugin-anno:jar:1.4.0 in http://myrepo:80/artifactory/repo was cached in the local repository, resolution will not be reattempted until the update interval of MyRepo has elapsed "
do as below 
mvn -U clean install where -U will force update the repo or use  <updatePolicy>always</updatePolicy>
in settings.xml 
-----
MAVEN
https://www.youtube.com/watch?v=x8sMN4tossY&t=690s

fix eclipse project error when maven build is success

mvn eclipse:eclipse

-------------------

below can be run from eclipse run configurations :- 

clean package install -Dmaven.test.skip=true  
spring-boot:run
if running from command prompt ( same folder that contains pom.xml):- 

mvn clean package install -Dmaven.test.skip=true 
mvn spring-boot:run
----------
to start execution from where the maven build failed
C:\Sumit\CODE\T-mobile\digitalpaymentsruleengine>mvn clean install -rf :rule-engine-service
-------
.m2 dir contains jars and pom file also which either contains transitive dependencies or no dependency
if transitive dependency is present , maven will download those jars also, if not no dependent jars will be downloaded
while running build maven looks for .pom file but sometimes .pomlastUpdated file is present , if there is no dependency this 
file can be renamed to .pom . or to download again remove the files in whole folder and run maven again
there is a maven command to remove all previously downloaded jars and do a fresh download
we can also manually remove all files from repository folder and when we run mvn clean install , alll dependencies 
will be downloaded again 
-------------
if we change maven repository , maven might downloads from old repository to fix this
1. delete all files from .m2/repository
2. run command to clear maven repository cache
-----------------
to configure maven in IDE give maven home path and also settings.xml path
--------------
maven phase represents stage in maven build lifecycle
package will combine source into jar/war etc, install phase installs to local repository, deploy phase jar/war is copied to remote repository
------
phases are executed in specific order
each maven goal are bound to phase
mvn compiler:compile  ( compiler:compile is goal, compiler is plugin and compile is phase ) , this compile goal is bound to compile phase 
mvn jar:jar is bound to package phase. check phases for each goal maven on google.
a phase is mapped to multiple goals
------------------
maven plugin is a group of goals, plugin is mapped to goals
goals are executed by plugin, <plugin> declaration modifies plugin
 
compiler plugin has 2 goals 1) compile and 2) test-compile


resources:resources  goal would only copy resources 

in maven build goal , we can give life cycle phases
A maven plugin can only be executed if it's bound a life-cycle phase in Maven.
-------------

BELOW plugin would copy to target locatoion
 
                <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <executions>
          <execution>
            <id>copy-resources</id>
            <!-- here the phase you need -->
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>F:/testMaven/Java9ModuleOut</outputDirectory>
              <resources>          
                <resource>
                  <directory>C:/Users/sumit.garg/eclipse-workspace_photon/DemoJava9/Java9ModuleOut</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>              
            </configuration>            
          </execution>
        </executions>
      </plugin>
      
      
-----

 <resource> default resources tag are src/main/java and src/main/test 
 if need to give additional src dir , can be given using resource as below 
 
<resource>
<directory>C:/Users/sumit.garg/eclipse-workspace_photon/DemoJava9/Java9ModuleOut</directory>
	<targetPath>F:/testMaven/</targetPath>
<filtering>true</filtering>
</resource>


-------

execute a goal
mvn groupId:artifactId:version:goal
---
 
maven compile will only compile if class files are not upto date , if we add jar in class path using eclipse and not in maven dependecncy
then project will be compiled and when mave compile runs it will run without any issue since eclipse classpth jars already helped compiling classes
maven can only compile classes using jars in its dependency

------

backup from 
<descriptorRefs>
  <descriptorRef>jar-with-dependencies</descriptorRef>
</descriptorRefs>
 
 to
 
<descriptor>src/bin/bin.xml</descriptor>
<descriptor>src/bin/bin1.xml</descriptor>
 </descriptors>

----------------

we can give jars in local machine as mave dependecy ie not need to be at maven repository as example below using <systemPath>

<dependency>
          <groupId>com.sun</groupId>
          <artifactId>tools</artifactId>
          <scope>system</scope>
          <version>1.6</version>
         <systemPath>${java.home}/../Classes/classes.jar</systemPath>
       </dependency>
-----------------

we can use mirror to override other repositories defined , for example in below settings.xml , mirror repository 
will be used , since it is  <mirrorOf>*</mirrorOf> , it will overide all other repositories 

https://stackoverflow.com/questions/36757902/what-is-mirror-in-maven-settings-xml-file
  <mirrors>
    <mirror>
      <mirrorOf>*</mirrorOf>
      <name>snapshot-internal-repositories</name>
      <url>https://artifactory.service.edp.t-mobile.com/artifactory/snapshot-internal-repositories</url>
      <id>snapshot-internal-repositories</id>
    </mirror>
  </mirrors> 
  <profiles>
     
  </profiles>
   
 -----------------------------------
 https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#:~:text=Dependency%20scope%20is%20used%20to,used%20for%20various%20build%20tasks.&text=This%20is%20the%20default%20scope,all%20classpaths%20of%20a%20project.
 SCOPES IN DEPENDENCY (there are 6 dependencies ):-  
compile
This is the default scope, used if none is specified. Compile dependencies are available in all classpaths of a project. Furthermore, those dependencies are propagated to dependent projects.
provided
This is much like compile, but indicates you expect the JDK or a container to provide the dependency at runtime. For example, when building a web application for the Java Enterprise Edition, you would set the dependency on the Servlet API and related Java EE APIs to scope provided because the web container provides those classes. This scope is only available on the compilation and test classpath, and is not transitive.
runtime
This scope indicates that the dependency is not required for compilation, but is for execution. It is in the runtime and test classpaths, but not the compile classpath.
test
This scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases.
system
This scope is similar to provided except that you have to provide the JAR which contains it explicitly. The artifact is always available and is not looked up in a repository.
import (only available in Maven 2.0.9 or later)
This scope is only used on a dependency of type pom in the section. It indicates that the specified POM should be replaced with the dependencies in that POM's section. Since they are replaced, dependencies with a scope of import do not actually participate in limiting the transitivity of a dependency.